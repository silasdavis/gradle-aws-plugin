// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
	}
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'license'

defaultTasks 'clean', 'build'

// ======== deployment options (dispatched on group name) ========
group = 'TouchType'
version = '0.14'

ext {
	artifactId = 'TouchType'
	defaultEncoding = 'UTF-8'
}

// ======== create source and javadoc bundles ========

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations {
	deployerJars
}

// ======== library versions ========
ext {
	awsJavaSdkVersion = '1.9.0'
	groovyVersion = '2.3.7'
	junitVersion = '4.+'
	hamcrestVersion = '1.3'
	mockitoCoreVersion = '1.9.5'
	guavaVersion = '18.0'
}

repositories {
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile "org.codehaus.groovy:groovy-all:$groovyVersion"
	compile "com.amazonaws:aws-java-sdk:$awsJavaSdkVersion"
	compile 'commons-codec:commons-codec:1.8'
	compile "com.google.guava:guava:$guavaVersion"

	// tests
	testCompile "junit:junit:$junitVersion"
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"

	deployerJars "org.springframework.build:aws-maven:4.7.0.RELEASE"
}

// ======== deploy artifacts ========
// Allows forks of the plugin to define their own deployment mechanisms
// in separate files named according to their maven group name
apply from: "deploy/${group}.gradle"

// ======== wrapper ========
task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}

// ======== License =======
license {
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	header file('copyright/HEADER')
	strictCheck true
}

// ======== IDE ========
eclipse {
	project {
		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.springframework.ide.eclipse.core.springbuilder'
		buildCommand 'net.sf.eclipsecs.core.CheckstyleNature'
		buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsNature'
		natures 'org.eclipse.jdt.core.javanature',
				'org.springsource.ide.eclipse.gradle.core.nature',
				'org.springframework.ide.eclipse.core.springnature',
				'net.sf.eclipsecs.core.CheckstyleBuilder',
				'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
	}
	classpath {
		defaultOutputDir = file('build/classes')
		containers = [
			'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7',
			'org.springsource.ide.eclipse.gradle.classpathcontainer'  // Gradle IDE classpath container
		]
		file {
			// exclude jar entries from .classpath
			whenMerged { classpath ->
				classpath.configure classpath.entries.grep { entry ->
					!(entry instanceof org.gradle.plugins.ide.eclipse.model.Library)
				}
				classpath.entries.findAll {
					it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("src/test/")
				}*.output = "build/test-classes"
			}
		}
		downloadSources = true
		downloadJavadoc = true
	}
}
